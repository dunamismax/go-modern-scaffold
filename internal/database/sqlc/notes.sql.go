// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: notes.sql

package database

import (
	"context"
)

const createNote = `-- name: CreateNote :one
INSERT INTO notes (
  content
) VALUES (
  $1
)
RETURNING id, content, created_at, updated_at
`

func (q *Queries) CreateNote(ctx context.Context, content string) (Note, error) {
	row := q.db.QueryRow(ctx, createNote, content)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteNote = `-- name: DeleteNote :exec
DELETE FROM notes
WHERE id = $1
`

func (q *Queries) DeleteNote(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteNote, id)
	return err
}

const getNote = `-- name: GetNote :one
SELECT id, content, created_at, updated_at FROM notes
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetNote(ctx context.Context, id int32) (Note, error) {
	row := q.db.QueryRow(ctx, getNote, id)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listNotes = `-- name: ListNotes :many
SELECT id, content, created_at, updated_at FROM notes
ORDER BY created_at DESC
`

func (q *Queries) ListNotes(ctx context.Context) ([]Note, error) {
	rows, err := q.db.Query(ctx, listNotes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Note{}
	for rows.Next() {
		var i Note
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateNote = `-- name: UpdateNote :one
UPDATE notes
SET
  content = $2,
  updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, content, created_at, updated_at
`

type UpdateNoteParams struct {
	ID      int32  `json:"id"`
	Content string `json:"content"`
}

func (q *Queries) UpdateNote(ctx context.Context, arg UpdateNoteParams) (Note, error) {
	row := q.db.QueryRow(ctx, updateNote, arg.ID, arg.Content)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
